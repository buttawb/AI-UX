import PIL
from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
import requests
from PIL import Image
from io import BytesIO
from google import genai
from google.genai import types
from .views import FIGMA_TOKENS, AVIALDO_GEMINI_KEY

# Design iteration prompt template for Gemini
GEMINI_DESIGN_ITERATION_PROMPT = """
You are a world-class UX/UI design expert. Your task is to analyze the provided design frame and create an improved version of it.

User Requirements:
{user_prompt}

IMPORTANT: You MUST generate a new image that implements all the improvements you describe. The image should:
1. Maintain the same dimensions as the original
2. Include all visual improvements described in your key_changes
3. Be a complete, polished design that can be used directly

Please provide your response in the following JSON format:
{{
    "improved_design": {{
        "description": "Detailed description of the improvements made",
        "key_changes": [
            "List of major changes made",
            "Each change should be specific and actionable"
        ]
    }},
    "comparison": {{
        "original_strengths": [
            "List of what worked well in the original design"
        ],
        "improvements_made": [
            "List of specific improvements implemented"
        ],
        "rationale": "Detailed explanation of why these changes improve the design"
    }}
}}
"""

def design_iteration_view(request):
    """
    View function for the design iteration page.
    """
    return render(request, 'design_iteration.html')

def generate_with_gemini(image, prompt):
    """Generate design iteration using Gemini API"""
    # Initialize the Gemini client
    client = genai.Client(api_key=AVIALDO_GEMINI_KEY)
    
    # Create a more explicit prompt for image generation
    text_input = f"""
    {prompt}

    Please analyze this design and create an improved version that implements all the suggested changes.
    You MUST generate a new image that shows the improved design.
    Focus on layout, visual hierarchy, and user experience improvements.
    """

    textt = "Add a dog next to me"

    imagee = PIL.Image.open('/Users/awb/Downloads/me.jpeg')
    imagee.show()
    
    response = client.models.generate_content(
        model="gemini-2.0-flash-preview-image-generation",
        contents=[textt, imagee],
        config=types.GenerateContentConfig(
            response_modalities=['TEXT', 'IMAGE'],
        )
    )

    if response.candidates:
        # Handle both text and image responses
        text_response = ""
        image_response = None
        
        for part in response.candidates[0].content.parts:
            if part.text is not None:
                print(part.text)
                text_response += part.text
            elif part.inline_data is not None:
                # Convert the image data directly to a PIL Image
                image_response = Image.open(BytesIO(part.inline_data.data))
                image_response.save("image_output.png")
                image.show()

        if not image_response:
            print("Warning: No image was generated by Gemini")
            
        return {
            "text": text_response,
            "image": image_response
        }
    return None

@csrf_exempt
def generate_iteration(request):
    """
    API endpoint to generate design iterations.
    """
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            figma_token = data.get('figma_token')
            design_data = data.get('design_data')
            iteration_prompt = data.get('iteration_prompt', '')

            if not figma_token:
                return JsonResponse({"error": "No access token provided"}, status=400)

            # Get the actual token value if it's a predefined token
            if figma_token in FIGMA_TOKENS:
                figma_token = FIGMA_TOKENS[figma_token]

            # Fetch Figma file data
            file_id = design_data.get('id')
            if not file_id:
                return JsonResponse({"error": "No Figma file ID provided"}, status=400)

            # Fetch Figma file structure
            figma_url = f"https://api.figma.com/v1/files/{file_id}"
            headers = {"X-Figma-Token": figma_token}
            figma_response = requests.get(figma_url, headers=headers)
            
            if figma_response.status_code != 200:
                return JsonResponse({"error": "Failed to fetch Figma file"}, status=400)

            figma_data = figma_response.json()

            # Extract frames and their images
            frames = []
            for canvas in figma_data.get('document', {}).get('children', []):
                for frame in canvas.get('children', []):
                    if frame.get('type') == 'FRAME':
                        frames.append({
                            'id': frame.get('id'),
                            'name': frame.get('name'),
                            'node': frame
                        })

            if not frames:
                return JsonResponse({"error": "No frames found in Figma file"}, status=400)

            # Fetch frame images
            frame_ids = [f['id'] for f in frames]
            image_url = f"https://api.figma.com/v1/images/{file_id}?ids={','.join(frame_ids)}&format=png&scale=2"
            image_response = requests.get(image_url, headers=headers)
            
            if image_response.status_code != 200:
                return JsonResponse({"error": "Failed to fetch frame images"}, status=400)

            image_data = image_response.json().get('images', {})
            
            # Process each frame image
            frame_images = []
            for frame_id, image_url in image_data.items():
                img_response = requests.get(image_url)
                if img_response.status_code == 200:
                    # Create PIL Image directly from the response content
                    image = Image.open(BytesIO(img_response.content))
                    frame_name = next((f['name'] for f in frames if f['id'] == frame_id), 'Unknown Frame')
                    frame_images.append({
                        'name': frame_name,
                        'image': image
                    })

            # Process each frame with Gemini
            results = []
            for frame in frame_images:
                # Prepare the prompt
                prompt = GEMINI_DESIGN_ITERATION_PROMPT.format(
                    user_prompt=iteration_prompt
                )

                # Generate iteration using Gemini
                response = generate_with_gemini(frame['image'], prompt)
                
                if response:
                    results.append({
                        'frame_name': frame['name'],
                        'text_response': response['text'],
                        'image_response': response['image']
                    })

            if not results:
                return JsonResponse({
                    'status': 'error',
                    'message': 'Failed to generate iterations'
                }, status=500)

            return JsonResponse({
                'status': 'success',
                'data': results
            })

        except requests.exceptions.RequestException as e:
            print(f"Request Error: {str(e)}")
            return JsonResponse({
                'status': 'error',
                'message': f'Failed to communicate with Gemini API: {str(e)}'
            }, status=500)
        except Exception as e:
            print(f"Error in generate_iteration: {str(e)}")
            print(f"Error type: {type(e)}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")
            return JsonResponse({
                'status': 'error',
                'message': f'An unexpected error occurred: {str(e)}'
            }, status=500)
    
    return JsonResponse({
        'status': 'error',
        'message': 'Method not allowed'
    }, status=405) 